#include <WiFi.h>
#include <Wire.h>
#include <HTTPClient.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>

//Inicializando o objeto dos sensores BMP280 e MPU6050
Adafruit_BMP280 bmp;
Adafruit_MPU6050 mpu;


//Defina as informações da sua rede Wi-Fi
const char* ssid = "nome-rede";
const char* password = "senha-rede";

// Defina as informações do seu servidor HTTP
const char* serverAddress = "https://obsat.org.br";
const char* endpoint = "/teste_post/envio.php";

void setup() {
  Serial.begin(9600);
  
  Serial.println();
  Serial.print("Conectando-se a ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Conectado!");

  //Inicializando o sensor BMP280
  if (!bmp.begin(0x76)) {
    Serial.println("Erro ao iniciar o sensor BMP280");
    while (1);
  }


//MPU6050 options

mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }
}

void loop() {
  //Leitura do BMP
  float temperatura = bmp.readTemperature();
  float pressao = bmp.readPressure() / 100.0; // Converta para hPa
  float altitude = bmp.readAltitude(1013.25); // Ajuste a pressão ao nível do mar

  //Leitura do MPU
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  //Número de casas decimais
  int numCasasDecimais = 2;

  //Convertendo os valores float em strings com o número de casas decimais definido
  //char temperaturaStr[10], pressaoStr[10], altitudeStr[10];
  //dtostrf(temperatura, 0, numCasasDecimais, temperaturaStr);
  //dtostrf(pressao, 0, numCasasDecimais, pressaoStr);
  //dtostrf(altitude, 0, numCasasDecimais, altitudeStr);
  // Criando o JSON manualmente

  String jsonString = "{";
  jsonString += "\"equipe\": 41,";
  jsonString += "\"bateria\": 86,";
  jsonString += "\"temperatura\":" + String(temperatura) + ",";
  jsonString += "\"pressao\":" + String(pressao) + ",";
  jsonString += "\"giroscopio\": [" + String(g.gyro.x) + "," + String(g.gyro.y) + "," + String(g.gyro.z) + "],";
  jsonString += "\"acelerometro\":[" + String(a.acceleration.x) + "," + String(a.acceleration.y) + "," + String(a.acceleration.z) + "],";
  jsonString += "\"payload\": [3.1415, 12, 123, 543, \"string\"]";
  jsonString += "}";

  // Imprimindo a string JSON no monitor serial
  Serial.println(jsonString);

///////////////////////////////////////////////////////

  // Criando um objeto HTTPClient
  HTTPClient httpClient;

  // Definindo o endpoint do servidor
  String url = String(serverAddress) + String(endpoint);

  // Configurando o objeto HTTPClient para enviar a solicitação POST
  httpClient.begin(url);
  httpClient.addHeader("Content-Type", "application/json");

  // Enviando a string JSON como corpo da solicitação POST
  int httpResponseCode = httpClient.POST(jsonString);

  // Obtendo a resposta do servidor
  if (httpResponseCode > 0) {
    Serial.print("Código de resposta: ");
    Serial.println(httpResponseCode);

    String response = httpClient.getString();
    Serial.print("Resposta do servidor: ");
    Serial.println(response);
  } else {
    Serial.print("Erro na solicitação. Código de erro: ");
    Serial.println(httpResponseCode);
  }

  // Liberando os recursos HTTP
  httpClient.end();

  //Atraso de 4 segundos
  delay(5000);
}
